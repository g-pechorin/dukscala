$import com.peterlavalle.sca.Model._

$def(module: Module)
package ${module.name} {

	import scala.scalajs.js.annotation.JSExport

	import scala.scalajs.js

$alt kind(tKind: TKind)
	$match tKind
		$case KindBool
			Boolean
    $case KindDeclaration(declaration: TDeclaration)
      ${declaration.name}
		$case KindVoid
			Unit
		$case KindSingle
			Float
		$case KindDouble
			Double
		$case KindString
			String
		$case KindSInt8
			Byte
		$case KindSInt16
			Short
		$case KindSInt32
			Int
	$end
$end

$alt arg(argument: Argument)
	${argument.name}: ${kind(argument.kind).trim}
$end

$alt mem(member: TMember)
	$match member
		$case memberFunction: MemberFunction
			def ${memberFunction.name}(${memberFunction.arguments.map(arg).foldLeft("")(_ + ", " + _.trim).replaceAll("^, ", "")}): ${kind(memberFunction.resultKind).trim}
		$case memberVariable: MemberVariable
			var ${memberVariable.name}: ${kind(memberVariable.kind).trim}
		$case memberValue: MemberValue
			val ${memberValue.name}: ${kind(memberValue.kind).trim}
	$end
$end

$each module.contents
$case script: Script
	@js.native
	trait ${script.name} extends js.Object {
	$each script.members
	$case member
		${mem(member).trim}
	$end
	}

$case native: Native
	@js.native
	class ${native.name} extends js.Object {

	$each native.members.filterNot(_.isInstanceOf[MemberRaw])
	$case member
		@js.native
		${mem(member).trim} = js.native

	$end
	}

$case global: Global
	@js.native
	object ${global.name} extends js.Object {

	$each global.members.filterNot(_.isInstanceOf[MemberRaw])
	$case member
		@js.native
		${mem(member).trim} = js.native

	$end
	}
$end
}
