#import(peterlavalle.scad40.Model)
<%@ val modelScript: Model.Script %>
<%@ val modelModule: Model.Module %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
#pragma region "script ${modelScript.name}"
inline void ${modelModule.name.replace(".", "::")}::${modelScript.name}::Push(void)
{
	assert(false && "??? scad40 needs to provide this");
}

inline scad40::duk_ref<${modelModule.name.replace(".", "::")}::${modelScript.name}> ${modelModule.name.replace(".", "::")}::${modelScript.name}::New(duk_context* ctx, const char* subclass)
{
	assert(false && "??? scad40 needs to provide this");
}

inline bool ${modelModule.name.replace(".", "::")}::${modelScript.name}::Is(duk_context* ctx, duk_idx_t idx)
{
	duk_error(ctx, 314, "??? scad40 needs to provide this");
	return false;
}

inline scad40::duk_ref<${modelModule.name.replace(".", "::")}::${modelScript.name}> ${modelModule.name.replace(".", "::")}::${modelScript.name}::To(duk_context* ctx, duk_idx_t idx)
{
	assert(false && "??? scad40 needs to provide this");
}
#pragma endregion