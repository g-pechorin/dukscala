#import(peterlavalle.scad40.Model)
<%@ val modelScript: Model.Script %>
<%@ val modelModule: Model.Module %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
#pragma region "script ${modelScript.name}"


#for (member <- modelScript.members)
${nephrite.sub("/script")(member)}
#end

inline scad40::duk_ptr<${modelModule.name.replace(".", "::")}::${modelScript.name}> ${modelModule.name.replace(".", "::")}::${modelScript.name}::New(duk_context* ctx, const char* subclass)
{
	// stack -> ... ;

	scad40::env::lookup(ctx, subclass);
	// stack -> ... ; ?class? ;

	if (!duk_is_function(ctx, -1))
	{
		duk_pop(ctx);
		duk_error(ctx, 314, "Thing `%s` is not a function", subclass);
	}

	// stack -> ... ; class() ;

	duk_new(ctx, 0);
	assert(duk_is_object(ctx, -1) && "SAN failed");
	// stack -> ... ; ?object? ;

	if (!${modelModule.name.replace(".", "::")}::${modelScript.name}::As(ctx, -1))
	{
		duk_pop(ctx);
		duk_error(ctx, 314, "Thing `%s` is not usable as ${modelModule.name.replace(".", "::")}::${modelScript.name}", subclass);
	}

	// stack -> ... ; object ;

	scad40::duk_ptr<${modelModule.name.replace(".", "::")}::${modelScript.name}> object(ctx, -1);
	duk_pop(ctx);
	// stack -> ... ;

	assert(!object.IsNull());

	return object;
}

inline bool ${modelModule.name.replace(".", "::")}::${modelScript.name}::As(duk_context* ctx, duk_idx_t idx)
{
	// stack -> ... ; idx .. base .. ;

	//
	// check each function / member ... not sure what to do about values

#for (member <- modelScript.members)
#match (member)
#case (Model.MemberFunction(name, _, _))
	duk_get_prop_string(ctx, idx, "${name}");
	// stack -> ... ; idx .. base .. ; ?${name}() ;

	if (duk_is_function(ctx, -1))
		duk_pop(ctx);
	else
	{
		duk_pop(ctx);
		return false;
	}
#end
#end

	return true;
}

inline scad40::duk_ptr<${modelModule.name.replace(".", "::")}::${modelScript.name}> ${modelModule.name.replace(".", "::")}::${modelScript.name}::To(duk_context* ctx, duk_idx_t idx)
{
	return scad40::duk_ptr<${modelModule.name.replace(".", "::")}::${modelScript.name}>(ctx, idx);
}




#pragma endregion