#import(peterlavalle.scad40.Model)
<%@ val modelGlobal: Model.Global %>
<%@ val modelModule: Model.Module %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
#{
    val modelNameSpace = modelModule.name.replace(".", "::")
    val declarationNameSpace = modelNameSpace  + "::" + modelGlobal.name
}#

#pragma region "global ${modelGlobal.name}"
inline ${declarationNameSpace}& ${declarationNameSpace}::get(duk_context* ctx)
{
	auto base = duk_get_top(ctx);

	// stack -> .... base .. ;

	scad40::env::lookup(ctx, "${modelModule.name}.${modelGlobal.name}");
	// stack -> .... base .. ; [${modelGlobal.name}] ;

	duk_get_prop_string(ctx, base, "\xFF" "*${modelGlobal.name}");
	// stack -> .... base .. ; [Disk] ; Disk[*] ;

    auto ptrDisk = reinterpret_cast<${declarationNameSpace}*>(duk_to_pointer(ctx, -1));
	duk_pop_2(ctx);
	// stack -> .... base .. ;

	return *ptr${modelGlobal.name};
}
#pragma endregion
