#import(peterlavalle.scad40.Model)
<%@ val modelModule: Model.Module %>
<%@ val modelGlobal: Model.Global %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
#{val modelNameSpace = modelModule.name.replace(".", "::")}#

duk_push_object(ctx);
// stack -> .... base .. ; [${modelGlobal.name}] ;

${modelNameSpace}::${modelGlobal.name}* this${modelGlobal.name} = (${modelNameSpace}::${modelGlobal.name}*) duk_alloc(ctx, sizeof(${modelNameSpace}::${modelGlobal.name}));
duk_push_pointer(ctx, this${modelGlobal.name});
// stack -> .... base .. ; [${modelGlobal.name}] ; *${modelGlobal.name} ;

duk_put_prop_string(ctx, idxBase, "\xFF" "*${modelGlobal.name}");
// stack -> .... base .. ; [${modelGlobal.name}] ;

scad40::push_selfie<${modelNameSpace}::${modelGlobal.name}>(ctx, this${modelGlobal.name}, 0, [](duk_context* ctx, ${modelNameSpace}::${modelGlobal.name}* this${modelGlobal.name}) -> duk_ret_t {
    assert(ctx == this${modelGlobal.name}->Host());

    this${modelGlobal.name}->~${modelGlobal.name}();

    duk_free(ctx, this${modelGlobal.name});
    // scad40::env::remove(ctx, "${modelModule.name}.${modelGlobal.name}");
    // TODO ; find a way to actually DO THIS!?!?

    return 0;
});
// stack -> .... base .. ; [${modelGlobal.name}] ; ~${modelGlobal.name}() ;

duk_set_finalizer(ctx, idxBase);
// stack -> .... base .. ; [${modelGlobal.name}] ;

#for (member <- modelGlobal.members.filterNot(_.isInstanceOf[Model.MemberRaw]))

// ${member.source}

    ${nephrite("\n\t", member)}

#end

assert(duk_get_top(ctx) == 1 + idxBase);
// stack -> .... base .. ; [${modelGlobal.name}] ;

scad40::env::assign(ctx, "${modelModule.name}.${modelGlobal.name}");
// stack -> .... base .. ;

*reinterpret_cast<${"duk_context**"}>(this${modelGlobal.name}) = ctx;
new (this${modelGlobal.name}) ${modelNameSpace}::${modelGlobal.name}();

assert(duk_get_top(ctx) == idxBase);
