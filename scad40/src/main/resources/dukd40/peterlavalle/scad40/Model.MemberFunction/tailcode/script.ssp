#import(peterlavalle.scad40.Model)
<%@ val modelMemberFunction: Model.MemberFunction %>
<%@ val modelScript: Model.Script %>
<%@ val modelModule: Model.Module %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
inline void ${modelModule.name.replace(".", "::")}::${modelScript.name}::${modelMemberFunction.name}(${modelMemberFunction.arguments.foldLeft("")((l, n) => l + ", " + nephrite.sub("/")(n).trim).replaceAll("^, ", "").trim})
{
	auto ptr = reinterpret_cast<${"scad40::duk_ptr"}<${modelScript.name}>*>(this);

	assert(Host() == ptr->Host() && "SAN failed");

	assert(Host() == path.Host());
	const auto base = duk_get_top(Host());

	// stack -> .. base .. ;

	ptr->Push();
	// stack -> .. base .. ; [self] ;

${"#ifdef _DEBUG"}
	const auto is_object = duk_is_object(Host(), -1) ? true : false;
	const auto is_null = ptr->IsNull();

	duk_get_prop_string(Host(), -1, "${modelMemberFunction.name}");
	// stack -> .. base .. ; [self] ; ${modelMemberFunction.name}() ;

	auto is_function = duk_is_function(Host(), -1) ? true : false;

	duk_pop(Host());
	// stack -> .. base .. ; [self] ;
${"#endif"}

	duk_push_string(Host(), "${modelMemberFunction.name}");
	// stack -> .. base .. ; [self] ; "${modelMemberFunction.name}" ;

#for (argument <- modelMemberFunction.arguments)
	${nephrite.sub("/argument")("\n\t", argument)}
#end

${"#ifndef"} _DEBUG
	duk_call_prop(Host(), base, ${modelMemberFunction.arguments.size});
${"#else"}
	auto result = duk_pcall_prop(Host(), base, ${modelMemberFunction.arguments.size});
	if (DUK_EXEC_SUCCESS != result)
	{
		const char* message = duk_safe_to_string(Host(), -1);
		std::cerr << "Failed to call `${modelModule.name}/${modelScript.name}::${modelMemberFunction.name}()` because\n\t" << message << std::endl;
		duk_error(Host(), 314, "Failed to call `${modelModule.name}/${modelScript.name}::${modelMemberFunction.name}()` because\n\t%s", message);
	}
${"#endif"}
	// stack -> .. base .. ; ?result? ;

	duk_pop(Host());
	return;
}
