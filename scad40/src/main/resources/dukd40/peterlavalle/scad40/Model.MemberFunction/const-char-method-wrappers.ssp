#import(peterlavalle.scad40.Model)
<%@ val modelMemberFunction: Model.MemberFunction %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
inline ${nephrite(modelMemberFunction.resultKind).trim} ${modelMemberFunction.name} (${modelMemberFunction.arguments.foldLeft("")((l, n) => l + ", " + nephrite(n).trim).replaceAll("^, ", "").trim})
{ #if (Model.KindVoid == modelMemberFunction.resultKind)
    ${modelMemberFunction.name}(
#else
    return ${modelMemberFunction.name}(
#end
#for ((argument, index) <- modelMemberFunction.arguments.zipWithIndex)
        ${(if (Model.KindString == argument.kind)
            "scad40::duk_str(Host(), %s)%s"
        else
            "%s%s"
        ).format(
            argument.name,
            if (modelMemberFunction.arguments.last == argument)
                ""
            else
                ","
        )}
#end
    );
}
