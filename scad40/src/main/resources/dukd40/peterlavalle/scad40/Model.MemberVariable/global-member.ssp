#import(peterlavalle.scad40.Model)
<%@ val modelMemberVariable: Model.MemberVariable %>
<%@ val modelModule: Model.Module %>
<%@ val modelGlobal: Model.Global %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
#{val modelNameSpace = modelModule.name.replace(".", "::")}#
duk_push_string(ctx, "${modelMemberVariable.name}");
scad40::push_selfie<${modelNameSpace}::${modelGlobal.name}>(ctx, this${modelGlobal.name}, 3, [](duk_context* ctx, ${modelNameSpace}::${modelGlobal.name}* this${modelGlobal.name}) -> duk_ret_t {
#match (modelMemberVariable.kind)
#case (Model.KindString)
    this${modelGlobal.name}->_${modelMemberVariable.name}.Push();
#end
    return 1;
});
scad40::push_selfie<${modelNameSpace}::${modelGlobal.name}>(ctx, this${modelGlobal.name}, 3, [](duk_context* ctx, ${modelNameSpace}::${modelGlobal.name}* this${modelGlobal.name}) -> duk_ret_t {
#match (modelMemberVariable.kind)
#case (Model.KindString)
    this${modelGlobal.name}->_${modelMemberVariable.name} = scad40::duk_str(ctx, 0);
#end
    return 0;
});
duk_def_prop(ctx, idxBase, DUK_DEFPROP_HAVE_GETTER | DUK_DEFPROP_HAVE_SETTER | DUK_DEFPROP_HAVE_ENUMERABLE);