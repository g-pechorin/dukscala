${ "#pragma" } region "duk_str"
inline scad40::duk_str::duk_str(duk_context* ctx) :
	scad40::duk_str(ctx, nullptr)
{
}


inline scad40::duk_str::operator const char* (void) const
{
	assert(nullptr != Host());
	// stack -> ... ;
	duk_push_global_stash(Host());
	// stack -> ... ; [global stash] ;
	duk_get_prop_string(Host(), -1, KeyString().data());
	// stack -> ... ; [global stash] ; "val" ;
	auto result = duk_to_string(Host(), -1);
	duk_pop_2(Host());
	// stack -> ... ;
	return result;
}
inline scad40::duk_str::duk_str(duk_context* ctx, duk_idx_t idx) :
	scad40::duk_object(ctx)
{
	assert(duk_is_string(ctx, idx));
	// stack -> ... ; "val" ; ... ;
	duk_push_global_stash(ctx);
	// stack -> ... ; "val" ; ... ; [global stash] ;
	duk_dup(ctx, idx);
	// stack -> ... ; "val" ; ... ; [global stash] ; "val" ;
	duk_put_prop_string(ctx, -2, KeyString().data());
	// stack -> ... ; "val" ; ... ; [global stash] ;
	duk_pop(ctx);
	// stack -> ... ; "val" ; ... ;
}
inline scad40::duk_str::duk_str(duk_context* ctx, const char* str) :
	scad40::duk_object(ctx)
{
	duk_push_global_stash(ctx);
	if (nullptr == str)
	{
		duk_push_undefined(ctx);
	}
	else
	{
		duk_push_string(ctx, str);
	}
	duk_put_prop_string(ctx, -2, KeyString().data());
	duk_pop(ctx);
}
#pragma endregion