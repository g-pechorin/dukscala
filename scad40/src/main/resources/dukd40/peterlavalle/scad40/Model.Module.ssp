#import(peterlavalle.scad40.Model)
<%@ val modelModule: Model.Module %>
<%@ val nephrite: peterlavalle.scad40.Nephrite %>
#{val modelNameSpace = modelModule.name.replace(".", "::")}#
${include("scad40-head.ssp")}

#for (space <- modelModule.name.split("\\\\."))
namespace ${space + " {"}
#end

#for (struct <- modelModule.contents)
	/// a ${struct.getClass.getSimpleName.toLowerCase} class
	${nephrite("\n\t", struct)}

#end

	/// sets up the tables and calls to this VM
	inline void install(duk_context* ctx)
	{
		const auto idxBase = duk_get_top(ctx);

		// >> check for name collisions
		if (scad40::env::exists(ctx, "${modelModule.name}"))
		{
			duk_error(ctx, 314, "Can't redefine module `${modelModule.name}`");
			return;
		}

		// >> bind lambdas for native class construction
		#for (struct <- modelModule.contents.filter(_.isInstanceOf[Model.Native]))

		{
			<%-- should probably peel these out into templates of their own --%>
			// stack -> .... base .. ;

			duk_push_c_function(ctx, [](duk_context* ctx) -> duk_ret_t {

				duk_error(ctx, 314, "??? STUB ; scad40 needs to create an instance of ${modelModule.name}.${struct.name}");
				return -1;

			}, 0);
			// stack -> .... base .. ; class:${struct.name}() ;

			scad40::env::assign(ctx, "${modelModule.name}.${struct.name}");
			// stack -> .... base .. ;

			assert(duk_get_top(ctx) == idxBase);
		}
		#end

		// >> allocate / in-place-new and store ALL global objects (including context pointers)
		{
			// stack -> .... base .. ;
			#for (struct <- modelModule.contents.filter(_.isInstanceOf[Model.Global]))

			// ${modelModule.name}/${struct.name}
			{
				${nephrite.sub("/global-member")("\n\t\t\t\t", struct)}
			}
			#end

		}
		assert(duk_get_top(ctx) == idxBase);
	}
}
}

${ "#ifndef" } _scad40_tail
${ "#define" } _scad40_tail

${include("scad40-tail.ssp")}

${ "#endif" } // ... okay - that's the end of predef


// =====================================================================================================================
// boilerplate usercode implementations - these things wrap/cast/adapt stuff for your "real" methods
// ---------------------------------------------------------------------------------------------------------------------

#for (struct <- modelModule.contents)
${nephrite.sub("/tailcode")(struct)}
#end
