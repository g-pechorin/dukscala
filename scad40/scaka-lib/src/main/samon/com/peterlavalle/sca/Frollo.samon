$import java.io.File
$def(module: Rollo.Module)
cmake_minimum_required(VERSION 3.1.0)
project ($<module.scList.name.replaceAll("[\\W_]+", "_")>)

if(WIN32)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else(WIN32)
	set(CMAKE_CXX_FLAGS "$<"${CMAKE_CXX_FLAGS}"> -std=c++11 -std=gnu++11 -static-libstdc++")
	set(CMAKE_EXE_LINKER_FLAGS "$<"${CMAKE_EXE_LINKER_FLAGS}"> -static-libstdc++")
endif(WIN32)

add_definitions(-DCMAKE_BINARY_DIR="$<"${CMAKE_BINARY_DIR}">")
add_definitions(-DCMAKE_SOURCE_DIR="$<"${CMAKE_SOURCE_DIR}">")

$each module.forceSet
$case (name: String, value: Boolean, comment: String)
set($<name> $<if (value) "ON" else "OFF"> CACHE BOOL "$<comment>" FORCE)
$end

$each module.includes
$case include
add_subdirectory(${include})
$end

$each module.directories
$case directory
include_directories(${directory})
$end

$each module.scList.mainInc
$case file
include_directories(${module.scList.root / file})
$end

$match module.scList.hasMain
$case false
add_library(
	${module.scList.name} OBJECT
$case true
add_executable(
	${module.scList.name}
	# TODO ; include OBJECT libraries
$end
$each module.scList.mainSrc
$case file: File
		${module.scList.root / file}
$end
	)
$match if (module.scList.hasMain) module.links.toList.sorted else List()
$case Nil
$case links
	target_link_libraries(${module.scList.name}$<links.foldLeft("")(_ + " " + _)>)
$end
$match module.scList.root.findParent(p => new File(p, "build.sbt").exists())
$case None
$case Some(build)
	$match build.findParent(p => new File(p, "sbt-launch.jar").exists() && new File(p, "sbt").exists() && new File(p, "sbt.bat").exists())
	$case None
	$case Some(sbtLaunch)
	add_custom_command(
		TARGET ${module.scList.name} PRE_BUILD
			COMMAND $<new File(sbtLaunch, "sbt").getAbsolutePath.replace("\\", "/")> scakaCMakeGenerate
			WORKING_DIRECTORY $<build.getAbsolutePath.replace("\\", "/")>)
	$end
$end



