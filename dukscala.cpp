#include <assert.h>
#include <iostream>

#include "duktape.h"


/// macro from another project - invokes a duktape call then blows up if somethign went wrong
#define GOOSE_CRITICAL_CALL(FUNC, ARGS, TEXT)	do { if (0 != FUNC ARGS) { std::cerr << __FILE__ << ":" << __LINE__ << " FAIL;\n\t" #FUNC #ARGS "\n\t`" << TEXT << "`\n" << std::endl; exit(EXIT_FAILURE); } } while(false)


int main(int argc, char* argv[])
{
	std::cout << "Rock and roll ..." << std::endl;
	std::cout << CMAKE_SOURCE_DIR "/scala/target/scala-2.11/hello-sbtw-fastopt.js" << std::endl;

	// create a DukTap VM
	duk_context* ctx = duk_create_heap_default();

	// run the script generated by Scala-JS
	GOOSE_CRITICAL_CALL(duk_peval_file_noresult, (ctx, CMAKE_SOURCE_DIR "/scala/target/scala-2.11/hello-sbtw-fastopt.js"), duk_safe_to_string(ctx, -1));

	// invoke the global function defined in peterlavalle/dukscala/DukScala.scala 
	GOOSE_CRITICAL_CALL(duk_peval_string, (ctx, "peterlavalle.dukscala.DukScala().foo();"), duk_safe_to_string(ctx, -1));

	// print out whatever came out
	std::cout << "peterlavalle.dukscala.DukScala().foo() = `" << duk_to_string(ctx, -1) << "`" << std::endl;

	duk_destroy_heap(ctx);


	return EXIT_SUCCESS;
}
